name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg
          .\vcpkg\bootstrap-vcpkg.bat

      - name: Install vcpkg (Ubuntu, macOS)
        if: runner.os != 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Create vcpkg cache directory
        run: mkdir -p "${{ github.workspace }}/vcpkgcache"

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          ./vcpkg/vcpkg install --feature-flags=binarycaching,manifests
        env:
          VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkgcache"
          VCPKG_FEATURE_FLAGS: "manifests,versions"

      - name: Install dependencies (Ubuntu, macOS)
        if: runner.os != 'Windows'
        run: |
          # Aqui execute o comando para instalar as bibliotecas necess√°rias para Ubuntu e macOS
        env:
          VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkgcache"
          VCPKG_FEATURE_FLAGS: "manifests,versions"

      - name: Create Build Directory
        run: mkdir cmake-build-debug

      - name: Configure CMake
        run: |
          cd cmake-build-debug
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        env:
          VCPKG_TARGET_TRIPLET: x64-windows

      - name: Build Project
        run: |
          cd cmake-build-debug
          cmake --build .