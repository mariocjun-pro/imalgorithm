name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout código-fonte
        uses: actions/checkout@v2

      - name: Inicializar vcpkg e definir ambiente
        run: |
          git clone https://github.com/microsoft/vcpkg
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./vcpkg/bootstrap-vcpkg.bat
            echo "VCPKG_TARGET_TRIPLET=x64-windows" >> $GITHUB_ENV
          else
            ./vcpkg/bootstrap-vcpkg.sh
            echo "VCPKG_TARGET_TRIPLET=x64-linux" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Ajustar dependências para não-Windows
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sed -i '/"dx11-binding",/d' vcpkg.json
            sed -i '/"win32-binding",/d' vcpkg.json
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            sed -i '' '/"dx11-binding",/d' vcpkg.json
            sed -i '' '/"win32-binding",/d' vcpkg.json
          fi
        shell: bash

      - name: Instalar dependências de desenvolvimento Ubuntu (para Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxmu-dev libxi-dev libgl-dev
        shell: bash

      - name: Instalar dependências adicionais para GLFW (para Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
        shell: bash

      - name: Criar diretório para cache do vcpkg
        run: mkdir -p "${{ github.workspace }}/vcpkgcache"

      - name: Instalar pacotes usando vcpkg
        run: |
          ./vcpkg/vcpkg install --feature-flags=binarycaching,manifests
        env:
          VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkgcache"
          VCPKG_FEATURE_FLAGS: "manifests,versions"
        shell: bash

      - name: Definir arquivo toolchain do vcpkg
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then 
            echo "VCPKG_TOOLCHAIN_FILE=${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake" >> $GITHUB_ENV
          else
            echo "VCPKG_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          fi

      - name: Criar diretório para build do CMake
        run: mkdir cmake-build-debug
        shell: bash

      - name: Configurar Projeto com CMake
        shell: bash
        run: |
          cd cmake-build-debug
          if [[ "${{ runner.os }}" == "macOS" ]]; then 
            cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE
          else
            cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE
          fi

      - name: Fazer a build do projeto com CMake
        run: |
          cd cmake-build-debug
          cmake --build . --config Debug
        shell: bash